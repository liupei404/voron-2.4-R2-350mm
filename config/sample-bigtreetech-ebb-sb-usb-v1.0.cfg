# 该文件包含 BIGTREETECH EBB USB 板的常用引脚映射.
# 要使用此配置，应使用“USB”为 RP2040 编译固件.
# “EBB Can”微控制器将用于控制喷嘴上的组件.

# 有关参数的描述，请参阅 docs/Config_Reference.md.

[mcu EBB]
serial: /dev/serial/by-id/usb-Klipper_rp2040_5044506118969B1C-if00

[temperature_sensor EBB_NTC]
sensor_type: Generic 3950
sensor_pin: EBB:gpio27

# 开始 X 轴校准
# SHAPER_CALIBRATE AXIS=X
# SHAPER_CALIBRATE AXIS=Y
[lis2dw]
cs_pin: EBB:gpio1 # 传感器的 SPI 使能引脚。如果使用 SPI，则必须提供此参数
#spi_speed: 5000000 # 与芯片通信时使用的 SPI 速度（以赫兹为单位），默认值为 5000000
spi_bus: spi0a
axes_map: z,x,y

[resonance_tester]
probe_points: 100, 100, 20
accel_chip: lis2dw

#####################################################################
# 	Extruder 挤出机
#####################################################################
[extruder]
step_pin: EBB:gpio18
dir_pin: EBB:gpio19
enable_pin: !EBB:gpio17
microsteps: 16
##	执行挤出机校准时更新以下值如果您要求 100 毫米的灯丝，但实际上它是 98 毫米:
##	rotation_distance = <previous_rotation_distance> * <actual_extrude_distance> / 100
##  22.6789511 是一个很好的起点
rotation_distance: 22.6789511 #新配置值 = 旧配置值 * （实际挤出量/目标挤出量） 13.60737066 * (85/50)
#   轴在步进电机（或指定了齿轮比例的最后一个齿轮）进行一次完整旋转时行进的距离（以毫米为单位）。必须提供此参数
##	根据您的挤出机类型更新齿轮比，对于 Afterburner/Clockwork（BMG 齿轮比）使用 50:17，对于 M4、M3.1 使用 80:20
#gear_ratio: 50:17				#BMG Gear Ratio
gear_ratio: 50:10				#ClockWork2
#   如果步进电机通过齿轮箱与轴相连，则为齿轮比例。
#   例如，如果使用的是5到1的齿轮箱，可以指定"5:1"。如果轴有多个齿轮箱，可以指定逗号分隔的齿轮比例列表（例如，"57:11, 2:1"）。
#   如果指定了gear_ratio，则rotation_distance指定了最后一个齿轮完整旋转时轴行进的距离。
#   默认情况下不使用齿轮比例。 
# microsteps: 32    #Luke - 改 : 细分数
full_steps_per_rotation: 200	#1.8度为200，0.9度为400
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: EBB:gpio7
pullup_resistor: 2200 # 2.2K
##	验证以下热敏电阻类型以确保其正确
sensor_type: EPCOS 100K B57560G104F # 龙热端                     
sensor_pin: EBB:gpio26
#以下为龙热端 PID_CALIBRATE HEATER=extruder TARGET=170
control: pid
pid_Kp: 43.269
pid_Ki: 5.887
pid_Kd: 79.504
min_temp: 0
max_temp: 260
pressure_advance: 0.044 # 压力提前
pressure_advance_smooth_time: 0.040
max_extrude_only_distance: 300
#   一次挤出或回抽的最大长度（以毫米耗材的长度为单位）
#   如果一次挤出或回抽超过了这个值，这会导致返回一个错误
#   默认值是：50mm

# sensor_type: MAX31865
# sensor_pin: EBB:gpio9
# spi_bus: spi1a
# rtd_nominal_r: 100
# rtd_reference_r: 430
# rtd_num_of_wires: 2

[tmc2209 extruder]
uart_pin: EBB:gpio20
run_current: 0.650
interpolate: False
# hold_current: 0.5
sense_resistor: 0.110
stealthchop_threshold: 0

[verify_heater extruder]
max_error: 120
check_gain_time:20
hysteresis: 50
heating_gain: 2

#--------------------------------------------------------------------
# 	风扇
#--------------------------------------------------------------------
# fan1 模型冷却风扇
[fan] # fan1 
pin: EBB:gpio14 # 控制风扇的输出引脚。此参数必须提供
kick_start_time: 0.5 #  首次启用或将风扇转速提高 50% 以上（帮助风扇旋转）时，风扇全速运行的时间（以秒为单位）。默认值为 0.100 秒
max_power: 1.0
# 引脚可设置的最大功率（以 0.0 到 1.0 之间的值表示）。
# 值为 1.0 时，引脚可长时间完全启用；值为 0.5 时，引脚启用时间不得超过一半。此设置可用于限制风扇的总功率输出（长时间）。
# 如果此值小于 1.0，则风扇转速请求将在 0 和 max_power 之间缩放（例如，如果 max_power 为 0.9，且请求的风扇转速为 80%，则风扇功率将设置为 72%）。
# 默认值为 1.0
#shutdown_speed: 0
# # 微控制器软件进入错误状态时所需的风扇转速（以 0.0 到 1.0 之间的值表示）。默认值为 0
#cycle_time: 0.010
# 每次 PWM 电源循环对风扇的持续时间（以秒为单位）。建议在使用基于软件的 PWM 时，此时间至少为 10 毫秒。默认值为 0.010 秒
#hardware_pwm: False
# 启用此选项可使用硬件 PWM 而非软件 PWM。大多数风扇在硬件 PWM 下工作效果不佳，因此除非有极高转速下的电气要求，否则不建议启用此选项。
# 使用硬件 PWM 时，实际循环时间受实现限制，可能与请求的 cycle_time 存在显著差异。默认值为 False
off_below: 0.0
#   为风扇供电的最低输入转速（以 0.0 到 1.0 之间的值表示）
#   当请求的转速低于 off_below 时，风扇将被关闭
#   此设置可用于防止风扇失速并确保启动有效
#   默认值为0.0

#   每次调整 max_power 时，都应重新校准此设置.
#   要校准此设置，请先将 off_below 设置为 0.0，并让风扇旋转。
#   逐渐降低风扇转速，以确定能够可靠驱动风扇且不会失速的最低输入转速。
#   将 off_below 设置为与此值对应的占空比（例如，12% -> 0.12）或略高.
#tachometer_pin:
#   用于监控风扇转速的转速计输入引脚。通常需要上拉电阻。此参数为可选参数.
#tachometer_ppr: 2
#   指定 tachometer_pin 时，此参数表示转速计信号每转的脉冲数。对于 BLDC 风扇，此参数通常是极数的一半。默认值为 2.
#tachometer_poll_interval: 0.0015
#   指定 tachometer_pin 时，这是转速表引脚的轮询周期，以秒为单位。
#   默认值为 0.0015，对于转速低于 10000 RPM、2 PPR 的风扇来说已经足够快了。
#   该值必须小于 30/(tachometer_ppr*rpm)，并留有一定的余量，其中 rpm 是风扇的最大转速（以 RPM 为单位）.
#enable_pin:
#   可选引脚，用于启用风扇电源。这对于带有专用 PWM 输入的风扇非常有用。
#   有些风扇即使在 PWM 输入为 0% 时也能保持开启。在这种情况下，PWM 引脚可以正常使用，
#   例如，可以使用接地开关的 FET（标准风扇引脚）来控制风扇电源.

# 热端风扇
[heater_fan hotend_fan] # fan2 
pin: EBB:gpio4
max_power: 1.0
#shutdown_speed:
#cycle_time:
#hardware_pwm:
kick_start_time: 0.5
#off_below:
#tachometer_pin:
#tachometer_ppr:
#tachometer_poll_interval:
#enable_pin:
#   有关上述参数的描述，请参阅“风扇”部分
heater: extruder
#   定义与此风扇关联的加热器的配置部分名称。如果此处提供了以逗号分隔的加热器名称列表，则当任何给定的加热器启用时，风扇也会启用。默认值为“extruder”。
heater_temp: 50.0
#   加热器必须降至低于此温度（以摄氏度为单位）才会禁用风扇。默认值为 50 摄氏度
##	如果遇到回流，可以降低 fan_speed
#fan_speed: 1.0
#   启用风扇加热器时，风扇转速（以 0.0 到 1.0 之间的值表示）。默认值为 1.0

# [fan_generic fan3]
# pin: EBB:gpio5

# [fan_generic 4W_FAN]
# pin: EBB:gpio16
# tachometer_pin: EBB:gpio12
# tachometer_ppr: 1


# Macros for setting the status leds on the Voron StealthBurner toolhead (or for any neopixel-type leds).
#
# You will need to configure a neopixel (or other addressable led, such as dotstar). See
# https://www.klipper3d.org/Config_Reference.html#neopixel for configuration details.


#####################################
#           INSTRUCTIONS            #
#####################################
# How to use all this stuff:
#
#     1.  Copy this .cfg file into your Klipper config directory and then add [include stealthburner_leds.cfg]
#         to the top of your printer.cfg in order for register the LEDs and macros with Klipper.
#     2.  Define your LEDs by editing [neopixel sb_leds] below and entering the data pin from your control board
#         as well as the color order.
#
#           Note: RGB and RGBW are different and must be defined explicitly.  RGB and RGBW are also not able to 
#                 be mix-and-matched in the same chain. A separate data line would be needed for proper functioning.
#
#                 RGBW LEDs will have a visible yellow-ish phosphor section to the chip.  If your LEDs do not have
#                 this yellow portion, you have RGB LEDs.
#
#     3.  Save your config and restart Klipper.
#
#           Note: We set RED and BLUE to 1.0 to make it easier for users and supporters to detect 
#                 misconfigurations or miswiring. The default color format is for Neopixels with a dedicated 
#                 white LED. On startup, all three SB LEDs should light up.
#
#                 If you get random colors across your LEDs, change the color_order to GRB and restart. Then
#                 omit the W for each suggested color_order in the next paragraph.
#
#                 If you get MAGENTA, your  color order is correct. If you get CYAN, you need to use RGBW. If
#                 you get YELLOW, you need to use BRGW (note that BRG is only supported in the latest Klipper
#                 version).
#
#     4.  Once you have confirmed that the LEDs are set up correctly, you must now decide where you want 
#         these macros called up...which means adding them to your existing gcode macros.  NOTHING will happen
#         unless you add the STATUS_????? macros to your existing gcode macros.  
#
#           Example: add STATUS_LEVELING to the beginning of your QGL gcode macro, and then add STATUS_READY 
#                    to the end of it to set the logo LED and nozzle LEDs back to the `ready` state.
#
#           Example: add STATUS_CLEANING to the beginning of your nozzle-cleaning macro, and then STATUS_READY
#                    to the end of it to return the LEDs back to `ready` state.
#
#     5.  Feel free to change colors of each macro, create new ones if you have a need to.  The macros provided below
#         are just an example of what is possible.  If you want to try some more complex animations, you will most
#         likely have to use WLED with Moonraker and a small micro-controller (please see the LED thread for help inside
#         of the stealthburner_beta channel on Discord).
#
#####################################
#       END INSTRUCTRUCTIONS        #
#####################################

#--------------------------------------------------------------------
# 	neopixel灯光
#--------------------------------------------------------------------
#用于设置 Voron StealthBurner 工具头上的状态 led 的宏（或任何 neopixel 类型的 led）
#您需要配置 neopixel（或其他可寻址 led，例如 dotstar）。有关配置详细信息，请参阅
#https://www.klipper3d.org/Config_Reference.html#neopixel
[neopixel sb_leds]
pin: EBB:gpio15
chain_count:10
#灯珠数量
#设置 LED 硬件所需的像素顺序。选项为 GRB、RGB、GRBW 或 RGBW。默认值为 GRB
color_order:GRB
# #   设置 Neopixel 的初始 LED 颜色。每个值应介于 0.0 和 1.0 之间。白色选项仅适用于 RGBW LED。每种颜色的默认值为 0。#
initial_RED:1.0
initial_GREEN:0.0
initial_BLUE:1.0
initial_WHITE:0.0
#
# 可以通过修改此文件开头的 _sb_vars 宏中的变量来完成宏的大多数配置. 
##########
# MACROS #
##########
# 以下状态宏可用:
   # STATUS_READY
   # STATUS_OFF
   # STATUS_BUSY
   # STATUS_HEATING
   # STATUS_LEVELING
   # STATUS_HOMING
   # STATUS_CLEANING
# 通过附加宏直接控制:
   # SET_NOZZLE_LEDS_ON
   # SET_LOGO_LEDS_OFF
   # SET_NOZZLE_LEDS_OFF
#
# 由 Voron discord 用户 wile.e、Tetsunosuke 和 etherwalker 贡献
[gcode_macro _sb_vars]
# StealthBurner 状态 LED 的用户设置。您可以在此处更改徽标和喷嘴的状态颜色和 LED 配置.
variable_colors: {
        'logo': { # Colors for logo states                                     # logo状态颜色
            'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},                  # 忙碌状态
            'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},             # 清洁状态
            'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},         # 校准Z状态
            'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},              # 加热状态
            'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},                # 归零状态
            'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},              # 层高校准状态
            'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},               # 网格状态
            'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},                   # 关闭状态
            'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},              # 打印状态
            'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},            # 待机状态
        },
        'nozzle': { # Colors for nozzle states                                 # 喷嘴状态颜色
            'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},               # 喷嘴加热状态
            'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},                   # 喷嘴关闭状态
            'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},                     # 喷嘴开启状态
            'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},                # 喷嘴待机状态
        },
        'thermal': {                                                           # 热床状态颜色
            'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},                   # 热床加热状态
            'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}                   # 热床冷却状态
        }
    }
variable_logo_led_name:         "sb_leds"                                      # 包含logo LED的可寻址LED链的名称
variable_logo_idx:              "1"                                            # logo中LED的索引，多个索引用逗号分隔
variable_nozzle_led_name:       "sb_leds"                                      # 包含喷嘴LED的可寻址LED链的名称。通常与logo使用相同的LED链
variable_nozzle_idx:            "2,3"                                          # 喷嘴LED的索引，多个索引用逗号分隔
gcode:                                                                         # 这一部分是必需的，请勿删除
    # This section is required.  Do Not Delete.
    
# variable_thermal_config: {
#         'extruder': {
#             'cool_temp': 40,
#             'leds': 'logo',
#         },
#         'heater_bed': {
#             'cool_temp': 40,
#             'leds': 'nozzle',
#         },
#     }
# # 冷却完成的温度

# gcode:
#     ; Do nothing

[gcode_macro _set_sb_leds]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = params.LED|string %}
    {% set idx = (params.IDX|string).split(',') %}
    {% set transmit_last = params.TRANSMIT|default(1) %}
    
    {% for led_index in idx %}
        {% set transmit=transmit_last if loop.last else 0 %}
        set_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}
    {% endfor %}

[gcode_macro _set_sb_leds_by_name]
gcode:
    {% set leds_name = params.LEDS %}
    {% set color_name = params.COLOR %}
    {% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}
    {% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}
    {% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}
    {% set transmit = params.TRANSMIT|default(1) %}

    _set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}
# 设置logo LED灯
[gcode_macro _set_logo_leds]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = printer["gcode_macro _sb_vars"].logo_led_name %}
    {% set idx = printer["gcode_macro _sb_vars"].logo_idx %}
    {% set transmit=params.TRANSMIT|default(1) %}

    _set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}
# 设置喷嘴LED灯
[gcode_macro _set_nozzle_leds]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}
    {% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}
    {% set transmit=params.TRANSMIT|default(1) %}

    _set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro set_logo_leds_off]
gcode:
    {% set transmit=params.TRANSMIT|default(1) %}
    _set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}


[gcode_macro set_nozzle_leds_on]
gcode:
    {% set transmit=params.TRANSMIT|default(1) %}
    _set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}

[gcode_macro _set_nozzle_leds_off]
gcode:
    {% set transmit=params.TRANSMIT|default(1) %}
    _set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}

[gcode_macro status_off]
gcode:
    _set_logo_leds_off transmit=0
    _set_nozzle_leds_off
    
[gcode_macro status_ready]
gcode:
    _set_sb_leds_by_name leds="logo" color="standby" transmit=0
    _set_sb_leds_by_name leds="nozzle" color="standby" transmit=1

[gcode_macro status_busy]
gcode:
    _set_sb_leds_by_name leds="logo" color="busy" transmit=0
    set_nozzle_leds_on

[gcode_macro status_heating]
gcode:
    _set_sb_leds_by_name leds="logo" color="heating" transmit=0
    _set_sb_leds_by_name leds="nozzle" color="heating" transmit=1

[gcode_macro status_leveling]
gcode:
    _set_sb_leds_by_name leds="logo" color="leveling" transmit=0
    set_nozzle_leds_on
    
[gcode_macro status_homing]
gcode:
    _set_sb_leds_by_name leds="logo" color="homing" transmit=0
    set_nozzle_leds_on

[gcode_macro status_cleaning]
gcode:
    _set_sb_leds_by_name leds="logo" color="cleaning" transmit=0
    set_nozzle_leds_on

[gcode_macro status_meshing]
gcode:
    _set_sb_leds_by_name leds="logo" color="meshing" transmit=0
    set_nozzle_leds_on

[gcode_macro status_calibrating_z]
gcode:
    _set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0
    set_nozzle_leds_on
    
[gcode_macro status_printing]
gcode:
    _set_sb_leds_by_name leds="logo" color="printing" transmit=0
    set_nozzle_leds_on

#[bltouch]
#sensor_pin: ^EBB:gpio21
#control_pin: EBB:gpio22

## NPN and PNP proximity switch types can be set by jumper
#[probe]
#pin: ^EBB:gpio6

#[output_pin endstop]
#pin: EBB:gpio13

# i2c_bus:i2c0h
# i2c_software_scl_pin: EBB:gpio29
# i2c_software_sda_pin: EBB:gpio28

# lis2dw_int1: EBB:gpio25
# led_pin: EBB:gpio24
